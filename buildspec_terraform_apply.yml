version: 0.2

env:
# O nome do cluster/service tem que ser o mesmo criado pelo Terraform
  variables:
    AWS_REGION: "us-east-1"
    CLUSTER_NAME: "ecs-elo7"
    SERVICE_NAME: "my-service"

  parameter-store:
    ACCOUNT_ID: "account_id"

phases:
  install:
    runtime-versions:
      docker: 18
    commands:
      - tf_version=$TERRAFORM_VERSION
      - wget https://releases.hashicorp.com/terraform/"$TERRAFORM_VERSION"/terraform_"$TERRAFORM_VERSION"_linux_amd64.zip
      - unzip terraform_"$TERRAFORM_VERSION"_linux_amd64.zip
      - mv terraform /usr/local/bin/
  pre_build:
    commands:
      # Criando infraestrutura com TERRAFORM
      - terraform init -lock=false -force-copy -input=false
      - terraform apply -lock=false -auto-approve

      - echo Logando no Amazon ECR... # Inicia sessão no Amazon ECR
      - aws --version
      - $(aws ecr get-login --region us-east-1 --no-include-email) # Realiza loggin no ECR
      - REPOSITORY_URI=$ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/my-service
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7) # Adicione uma tag de imagem com os primeiros sete caracteres do ID de confirmação do Git da origem.
      - IMAGE_TAG=${COMMIT_HASH:=latest}
  build:
    commands:
      - cd docker-react_app
      - echo Build iniciado hein `date`
      - echo Construindo imagem docker...
      - docker build -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
  post_build:
    commands:
      - echo Build completo hein `date`
      - echo Enviando imagem docker para o repositorio Amazon ECR com ambas as tags...
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo Writing image definitions file...
      - printf '[{"name":"my-service","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
# A linha abaixo não é necessária se tiver um projeto apenas para o deploy da aplicação
      - aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force-new-deployment
      - cd ..
      - echo Copie e cole o seguinte link '(dns_name)' no navegador
      - terraform output
# Grave um arquivo denominado imagedefinitions.json na raiz da compilação que contém o nome do contêiner 
# e a imagem e tag do serviço do Amazon ECS. O estágio de implantação do pipeline de CD usa essas 
# informações para criar uma nova revisão da definição de tarefa do serviço e, em seguida, atualiza 
# o serviço para usar a nova definição de tarefa. O arquivo imagedefinitions.json é necessário 
# para o operador de trabalho do ECS.
artifacts:
    files: imagedefinitions.json

# Para destruir a infraestrutura basta descomentar as linhas abaixo
# e comentar as de cima a partir da linha terraform init
      #- terraform init -force-copy -input=false
      #- terraform destroy -lock=false -auto-approve -input=false
